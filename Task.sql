-- ATHLETE TABLE

CREATE TABLE ATHLETE(
ID INT ,
NAME VARCHAR,
SEX CHAR,
AGE VARCHAR ,
HEIGHT VARCHAR ,
WEIGHT VARCHAR,
TEAM VARCHAR,
NOC VARCHAR,
GAMES VARCHAR,
YEAR INT,
SEASON VARCHAR,
CITY VARCHAR,
SPORT VARCHAR,
EVENT VARCHAR,
MEDAL VARCHAR  
);


COPY ATHLETE FROM 'C:\Users\SOUMYA RANJAN MISHRA\OneDrive\Desktop\SQL FINAL PROJECT\athlete_events.csv' DELIMITER ',' CSV HEADER;
SELECT * FROM ATHLETE;

UPDATE ATHLETE
SET AGE=NULL WHERE AGE='NA';

UPDATE ATHLETE 
SET HEIGHT=NULL WHERE HEIGHT='NA'

UPDATE ATHLETE 
SET WEIGHT=NULL WHERE WEIGHT='NA'


-- 1) Data Cleaning And Preprocessing

-- A)Convert Data Types

ALTER TABLE ATHLETE 
ALTER COLUMN AGE TYPE INTEGER USING AGE::INTEGER,
ALTER COLUMN HEIGHT TYPE NUMERIC USING HEIGHT::NUMERIC,
ALTER COLUMN WEIGHT TYPE NUMERIC USING WEIGHT::NUMERIC;

-- B)Handle Missing Data
SELECT * FROM ATHLETE;

SELECT 
SUM(CASE WHEN AGE IS NULL THEN 1 ELSE 0 END) AS AGE_NULL_COUNT,
SUM(CASE WHEN HEIGHT IS NULL THEN 1 ELSE 0 END) AS HEIGHT_NULL_COUNT,
SUM(CASE WHEN WEIGHT IS NULL THEN 1 ELSE 0 END) AS WEIGHT_NULL_COUNT
FROM ATHLETE;

-- C)Standardize Medal Names
UPDATE ATHLETE
SET MEDAL=NULL WHERE MEDAL='NA';

SELECT DISTINCT MEDAL FROM ATHLETE;

-- NOC TABLE
CREATE TABLE COUNTRY(
NOC VARCHAR,
REGION VARCHAR,
NOTES VARCHAR
);

COPY COUNTRY FROM 'C:\Users\SOUMYA RANJAN MISHRA\OneDrive\Desktop\SQL FINAL PROJECT\noc_regions.csv' DELIMITER ',' CSV HEADER;
SELECT * FROM COUNTRY;


-- 2)Data Analysis And Calculations

-- A)Top Medal-Winning Countries
SELECT * FROM ATHLETE;
SELECT * FROM COUNTRY;

SELECT B.REGION AS COUNTRIES,
COUNT(A.MEDAL) AS COUNT
FROM ATHLETE AS A 
LEFT JOIN COUNTRY AS B
ON A.NOC=B.NOC
GROUP BY B.REGION 
ORDER BY COUNT DESC LIMIT 10;
 
-- B)Medal Distribution By Season
SELECT COUNTRIES,
SUM(SUMMER_COUNT) AS SUMMER_COUNT,
SUM(WINTER_COUNT) AS WINTER_COUNT
FROM
(SELECT B.REGION AS COUNTRIES,
COUNT(A.MEDAL) AS SUMMER_COUNT,
0 AS WINTER_COUNT
FROM ATHLETE AS A 
LEFT JOIN COUNTRY AS B
ON A.NOC=B.NOC
WHERE A.SEASON='Summer'
GROUP BY B.REGION 

UNION ALL

SELECT B.REGION AS COUNTRIES,
0 AS SUMMER_COUNT,
COUNT(A.MEDAL) AS WINTER_COUNT
FROM ATHLETE AS A 
LEFT JOIN COUNTRY AS B
ON A.NOC=B.NOC
WHERE A.SEASON='Winter'
GROUP BY B.REGION) 
GROUP BY COUNTRIES
ORDER BY (SUM(SUMMER_COUNT) + SUM(WINTER_COUNT)) DESC 
LIMIT 10;

-- C)Athlete Performance Analysis
SELECT NAME,COUNT(MEDAL) AS MEDAL_COUNT
FROM ATHLETE GROUP BY NAME ORDER BY MEDAL_COUNT 
DESC LIMIT 5;

-- D)Country With The Highest Gold Medal Ratio
SELECT B.REGION AS COUNTRIES,
ROUND((SUM(CASE WHEN A.MEDAL='Gold' THEN 1 ELSE 0 END)*100.0/NULLIF(COUNT(A.MEDAL),0)),2) AS 
GOLD_PERCENT
FROM ATHLETE AS A
LEFT JOIN COUNTRY AS B
ON A.NOC=B.NOC
GROUP BY B.REGION
HAVING COUNT(A.MEDAL)>0
ORDER BY GOLD_PERCENT DESC
LIMIT 1;


-- 3)Advanced SQL Concepts

-- A)Dynamic Country-Based Medal Count
SELECT B.REGION AS COUNTRY,
COUNT(A.MEDAL) AS MEDALS_COUNT
FROM ATHLETE AS A
JOIN
COUNTRY AS B
ON A.NOC=B.NOC
WHERE B.REGION='Selected country'
GROUP BY COUNTRY;

-- B)Find Athletes Who Competed In Multiple Sports
SELECT NAME, COUNT(DISTINCT SPORT) FROM ATHLETE GROUP BY NAME 
HAVING COUNT(DISTINCT SPORT)>1
ORDER BY COUNT(DISTINCT SPORT) DESC;

-- C)Most Successful Athletes Per Country
SELECT NAME,
COUNTRY,
MEDALS_COUNT AS MEDALS_WON
FROM 
(SELECT A.NAME AS NAME,
B.REGION AS COUNTRY,
COUNT(A.MEDAL) AS MEDALS_COUNT,
DENSE_RANK() OVER (PARTITION BY B.REGION ORDER BY COUNT(A.MEDAL) DESC) AS RANK
FROM ATHLETE AS A 
LEFT JOIN 
COUNTRY AS B
ON A.NOC=B.NOC
GROUP BY A.NAME,B.REGION)
AS RANKEDATHLETE
WHERE RANK=1
ORDER BY MEDALS_WON DESC;

-- D)Event Popularity Analysis
SELECT EVENT,
COUNT(DISTINCT ID) AS ATHLETE_COUNT
FROM ATHLETE 
GROUP BY EVENT 
ORDER BY ATHLETE_COUNT DESC
LIMIT 5;


-- 4)Joins And Multi-Table Queries

-- A)Region-Based Medal Analysis
SELECT NOC,COUNT(MEDAL) AS MEDALS_COUNT
FROM ATHLETE GROUP BY NOC 
ORDER BY MEDALS_COUNT DESC;

-- B)Countries That Have Never Won a Medal
SELECT B.REGION AS COUNTRIES
FROM ATHLETE AS A 
LEFT JOIN COUNTRY AS B
ON A.NOC=B.NOC 
GROUP BY B.REGION
HAVING
COUNT(MEDAL)=0;
